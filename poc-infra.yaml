AWSTemplateFormatVersion: '2010-09-09'
Description: |
  (FIXED & ENHANCED) AWS CloudFormation Template for a two-tier Proof-of-Concept (PoC) architecture.
  This template deploys a VPC with public/private subnets, an EC2 Web Server with Nginx proxying
  to a Python Gunicorn application, and a private RDS PostgreSQL instance. It includes a robust
  systemd service for application management and the CodeDeploy Agent for CI/CD.

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.
  
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for Public Subnet 1.
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for Public Subnet 2.
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.11.0/24
    Description: CIDR block for Private Subnet 1.
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.12.0/24
    Description: CIDR block for Private Subnet 2.

  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type for the web server.
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: Latest Amazon Linux 2 AMI.
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access.
  SshCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: (SECURITY RISK) CIDR block for SSH access. Please restrict this to your IP address (e.g., 1.2.3.4/32).

  DBInstanceIdentifier:
    Type: String
    Default: app-poc-db
    Description: Unique identifier for the RDS database instance.
  DBUsername:
    Type: String
    Default: masteruser
    Description: Master username for the RDS database.
  DBPassword:
    Type: String
    NoEcho: true
    Description: Master password for the database.
  DBInstanceType:
    Type: String
    Default: db.t3.micro
    Description: RDS instance class.
  DBAllocatedStorage:
    Type: Number
    Default: 20
    Description: Allocated storage for the database in GB.
  DBName:
    Type: String
    Default: pocdb
    Description: Initial database name.

Resources:
  # --- VPC & Networking ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-IGW"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public-1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public-2"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private-2"

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NAT-GW"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public-RT"

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private-RT"

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # --- Security ---
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP and restricted SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SshCidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Web-SG"

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow DB access only from Web EC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref WebSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-DB-SG"

  # --- IAM Role for EC2 ---
  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy

  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WebInstanceRole

  # --- EC2 Web Server ---
  WebServer:
    Type: AWS::EC2::Instance
    DependsOn:
      - RDSInstance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref WebSecurityGroup
      IamInstanceProfile: !Ref WebInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WebServer"
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -xe
              # UserData script for Web Server Setup
              
              # --- 1. System & Package Installation ---
              yum update -y
              amazon-linux-extras install python3.8 nginx1 -y
              yum install -y postgresql-devel gcc ruby wget
              pip3 install flask gunicorn psycopg2-binary passlib
              
              # --- 2. Install CodeDeploy Agent (for CI/CD) ---
              wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
              chmod +x install
              ./install auto
              systemctl start codedeploy-agent
              systemctl enable codedeploy-agent

              # --- 3. Application Setup ---
              mkdir -p /var/www/app
              
              cat << EOF > /var/www/app/.env
              DB_ENDPOINT=${DBEndpoint}
              DB_USERNAME=${DBUsername}
              DB_PASSWORD='${DBPassword}'
              DB_NAME=${DBName}
              DB_PORT=${DBPort}
              EOF
              
              cat << 'EOF' > /var/www/app/app.py
              import os
              import psycopg2
              from flask import Flask, request, jsonify
              from passlib.hash import pbkdf2_sha256

              DB_ENDPOINT = os.environ.get("DB_ENDPOINT")
              DB_NAME = os.environ.get("DB_NAME")
              DB_USER = os.environ.get("DB_USERNAME")
              DB_PASS = os.environ.get("DB_PASSWORD")
              DB_PORT = os.environ.get("DB_PORT")
              
              app = Flask(__name__)

              def get_db_connection():
                  try:
                      conn = psycopg2.connect(
                          host=DB_ENDPOINT, database=DB_NAME, user=DB_USER, password=DB_PASS, port=DB_PORT
                      )
                      return conn
                  except Exception as e:
                      print(f"Database connection error: {e}")
                      return None

              def initialize_db():
                  conn = get_db_connection()
                  if conn:
                      try:
                          with conn.cursor() as cursor:
                              cursor.execute("""
                                  CREATE TABLE IF NOT EXISTS users (
                                      id SERIAL PRIMARY KEY,
                                      email VARCHAR(255) UNIQUE NOT NULL,
                                      password_hash VARCHAR(255) NOT NULL
                                  );
                              """)
                              conn.commit()
                      except Exception as e:
                          print(f"Database initialization error: {e}")
                      finally:
                          conn.close()

              @app.route('/signup', methods=['POST'])
              def signup():
                  data = request.json
                  email = data.get('email')
                  password = data.get('password')
                  if not email or not password:
                      return jsonify({"error": "Email and password required"}), 400
                  password_hash = pbkdf2_sha256.hash(password)
                  conn = get_db_connection()
                  if not conn:
                      return jsonify({"error": "Database unavailable"}), 503
                  try:
                      with conn.cursor() as cursor:
                          cursor.execute(
                              "INSERT INTO users (email, password_hash) VALUES (%s, %s)", (email, password_hash)
                          )
                          conn.commit()
                      return jsonify({"message": "User created successfully"}), 201
                  except psycopg2.errors.UniqueViolation:
                      conn.rollback()
                      return jsonify({"error": "User already exists"}), 409
                  except Exception as e:
                      conn.rollback()
                      print(f"Signup error: {e}")
                      return jsonify({"error": "Internal server error"}), 500
                  finally:
                      if conn: conn.close()

              @app.route('/login', methods=['POST'])
              def login():
                  data = request.json
                  email = data.get('email')
                  password = data.get('password')
                  conn = get_db_connection()
                  if not conn:
                      return jsonify({"error": "Database unavailable"}), 503
                  user_data = None
                  try:
                      with conn.cursor() as cursor:
                          cursor.execute("SELECT password_hash FROM users WHERE email = %s", (email,))
                          user_data = cursor.fetchone()
                  except Exception as e:
                      print(f"Login database error: {e}")
                      return jsonify({"error": "Internal server error"}), 500
                  finally:
                      if conn: conn.close()
                  if user_data and pbkdf2_sha256.verify(password, user_data[0]):
                      return jsonify({"message": f"Login successful for {email}"}), 200
                  else:
                      return jsonify({"error": "Invalid credentials"}), 401
              
              @app.route('/health')
              def health_check():
                  return jsonify({"status": "ok"}), 200

              if __name__ == '__main__':
                  initialize_db()
                  app.run(host='127.0.0.1', port=5000)
              EOF
              
              cat << 'FRONTEND_EOF' > /var/www/app/index.html
              <!DOCTYPE html>
              <html lang="en">
              <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>PoC Web App: Login & Signup</title>
                  <script src="https://cdn.tailwindcss.com"></script>
                  <style> body { font-family: 'Inter', sans-serif; background-color: #f7f9fb; } </style>
              </head>
              <body class="flex items-center justify-center min-h-screen p-4">
                  <div class="w-full max-w-md bg-white p-8 rounded-xl shadow-2xl border border-gray-100">
                      <div class="flex justify-center mb-6"><h1 id="title" class="text-3xl font-extrabold text-indigo-700">Login</h1></div>
                      <div id="message-box" class="hidden" role="alert"><span class="block sm:inline" id="alert-text"></span></div>
                      <form id="auth-form" class="space-y-6">
                          <div>
                              <label for="email" class="block text-sm font-medium text-gray-700">Email Address</label>
                              <input type="email" id="email" name="email" required class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                          </div>
                          <div>
                              <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                              <input type="password" id="password" name="password" required minlength="8" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                              <p class="text-xs text-gray-500 mt-1">Minimum 8 characters.</p>
                          </div>
                          <div><button type="submit" id="submit-button" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-lg text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Log In</button></div>
                      </form>
                      <div class="mt-6 text-center"><button id="toggle-button" class="text-sm text-indigo-600 hover:text-indigo-800">Need an account? Sign Up</button></div>
                  </div>
                  <script>
                      const form = document.getElementById('auth-form'), title = document.getElementById('title'), submitButton = document.getElementById('submit-button'), toggleButton = document.getElementById('toggle-button'), messageBox = document.getElementById('message-box'), alertText = document.getElementById('alert-text'); let isLogin = true;
                      const showMessage = (message, isError = true) => {
                          alertText.textContent = message;
                          messageBox.classList.remove('hidden');
                          var color = isError ? 'red' : 'green';
                          messageBox.className = 'bg-' + color + '-100 border border-' + color + '-400 text-' + color + '-700 px-4 py-3 rounded mb-4';
                          setTimeout(() => { messageBox.classList.add('hidden'); }, 5000); 
                      };
                      const toggleMode = () => { isLogin = !isLogin; title.textContent = isLogin ? 'Login' : 'Sign Up'; submitButton.textContent = isLogin ? 'Log In' : 'Create Account'; toggleButton.textContent = isLogin ? 'Need an account? Sign Up' : 'Already have an account? Log In'; };
                      const handleFormSubmit = async (event) => {
                          event.preventDefault();
                          const email = document.getElementById('email').value, password = document.getElementById('password').value, endpoint = isLogin ? '/login' : '/signup';
                          submitButton.disabled = true; submitButton.textContent = 'Processing...';
                          try {
                              const response = await fetch(endpoint, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email, password }) });
                              const result = await response.json();
                              if (response.ok) {
                                  showMessage(result.message + (isLogin ? "" : " Switching to Login."), false);
                                  if (!isLogin) toggleMode();
                                  form.reset();
                              } else { showMessage('[' + response.status + '] ' + (result.error || 'Request failed'), true); }
                          } catch (error) { showMessage("Could not connect to the backend server.", true); } finally { submitButton.disabled = false; submitButton.textContent = isLogin ? 'Log In' : 'Create Account'; }
                      };
                      toggleButton.addEventListener('click', toggleMode); form.addEventListener('submit', handleFormSubmit);
                  </script>
              </body>
              </html>
              FRONTEND_EOF
              
              # --- 4. Service Configuration (systemd) ---
              cat << EOF > /etc/systemd/system/poc-app.service
              [Unit]
              Description=Gunicorn instance to serve PoC Flask App
              After=network.target
              [Service]
              User=ec2-user
              Group=ec2-user
              WorkingDirectory=/var/www/app
              EnvironmentFile=/var/www/app/.env
              ExecStart=/usr/local/bin/gunicorn --workers 3 --bind 127.0.0.1:5000 app:app
              Restart=always
              [Install]
              WantedBy=multi-user.target
              EOF
              
              # --- 5. Nginx Configuration (Reverse Proxy) ---
              cat << 'EOF' > /etc/nginx/conf.d/poc-app.conf
              server {
                  listen 80;
                  server_name _;
                  location / {
                      proxy_pass http://127.0.0.1:5000;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  }
              }
              EOF
              
              chown -R ec2-user:ec2-user /var/www/app
              
              # --- 6. Start and Enable Services ---
              systemctl daemon-reload
              systemctl enable poc-app.service
              systemctl start poc-app.service
              systemctl enable nginx
              systemctl start nginx

              # Run DB initialization after the app service is running
              sleep 10 # Give Gunicorn a moment to start
              python3 /var/www/app/app.py
            - DBEndpoint: !GetAtt RDSInstance.Endpoint.Address
              DBUsername: !Ref DBUsername
              DBPassword: !Ref DBPassword
              DBName: !Ref DBName
              DBPort: !GetAtt RDSInstance.Endpoint.Port

  # --- RDS Database ---
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-DB-SubnetGroup"

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: !Ref DBInstanceType
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBName
      AllocatedStorage: !Ref DBAllocatedStorage
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      MultiAZ: false
      PubliclyAccessible: false

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
  WebInstancePublicIP:
    Description: Public IP of the EC2 instance. Access the app via http://<IP>
    Value: !GetAtt WebServer.PublicIp
  DBEndpoint:
    Description: RDS Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address
  DBPort:
    Description: RDS Port
    Value: !GetAtt RDSInstance.Endpoint.Port
